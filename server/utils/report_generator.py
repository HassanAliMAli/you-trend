"""
Report Generator Module for YouTrend

This module generates reports in various formats (TXT, CSV, XLSX, PDF)
containing YouTube trend analysis data and insights.
"""

import io
import csv
import json
from typing import Dict, List, Any, Union, BinaryIO
import pandas as pd
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend

def generate_txt_report(data: Dict[str, Any], report_type: str = 'trend') -> str:
    """
    Generate a plain text report from YouTube trend data
    
    Args:
        data: Dictionary containing trend analysis data
        report_type: Type of report ('trend' or 'compare')
        
    Returns:
        Plain text report content
    """
    output = []
    
    # Add header
    output.append("YOUTREND ANALYSIS REPORT")
    output.append("=" * 50)
    output.append("")
    
    if report_type == 'trend':
        # Add video section
        if 'videos' in data and data['videos']:
            output.append("TOP VIDEOS")
            output.append("-" * 50)
            
            for i, video in enumerate(data['videos'][:10], 1):  # Top 10 videos
                snippet = video.get('snippet', {})
                stats = video.get('statistics', {})
                
                output.append(f"{i}. {snippet.get('title', 'Untitled')}")
                output.append(f"   Channel: {snippet.get('channelTitle', 'Unknown')}")
                output.append(f"   Views: {int(stats.get('viewCount', 0)):,}")
                output.append(f"   Likes: {int(stats.get('likeCount', 0)):,}")
                output.append(f"   Comments: {int(stats.get('commentCount', 0)):,}")
                output.append("")
        
        # Add channel section
        if 'channels' in data and data['channels']:
            output.append("TOP CHANNELS")
            output.append("-" * 50)
            
            for i, channel in enumerate(data['channels'][:10], 1):  # Top 10 channels
                snippet = channel.get('snippet', {})
                stats = channel.get('statistics', {})
                
                output.append(f"{i}. {snippet.get('title', 'Untitled')}")
                output.append(f"   Subscribers: {int(stats.get('subscriberCount', 0)):,}")
                output.append(f"   Videos: {int(stats.get('videoCount', 0)):,}")
                output.append(f"   Views: {int(stats.get('viewCount', 0)):,}")
                output.append("")
        
        # Add topics section
        if 'topics' in data and data['topics']:
            output.append("TRENDING TOPICS")
            output.append("-" * 50)
            
            for i, topic in enumerate(data['topics'][:10], 1):  # Top 10 topics
                output.append(f"{i}. {topic['name']} (Count: {topic['count']})")
            
            output.append("")
        
        # Add video ideas section
        if 'ideas' in data and data['ideas']:
            output.append("VIDEO IDEAS")
            output.append("-" * 50)
            
            for i, idea in enumerate(data['ideas'], 1):
                output.append(f"{i}. {idea}")
            
            output.append("")
    
    elif report_type == 'compare':
        # Add comparison section
        if 'metrics' in data:
            output.append("NICHE COMPARISON")
            output.append("-" * 50)
            
            for niche, metrics in data['metrics'].items():
                output.append(f"Niche: {niche}")
                output.append(f"  Average Views: {int(metrics.get('avg_views', 0)):,}")
                output.append(f"  Engagement Rate: {metrics.get('avg_engagement_rate', 0):.2%}")
                
                # Add top topics for niche
                if 'topics' in metrics and metrics['topics']:
                    output.append("  Top Topics:")
                    for i, topic in enumerate(metrics['topics'][:5], 1):
                        output.append(f"    {i}. {topic['name']} (Count: {topic['count']})")
                
                output.append("")
        
        # Add insights
        if 'insights' in data and data['insights']:
            output.append("INSIGHTS")
            output.append("-" * 50)
            
            for i, insight in enumerate(data['insights'], 1):
                output.append(f"{i}. {insight}")
            
            output.append("")
    
    # Add footer
    output.append("=" * 50)
    output.append("Generated by YouTrend - YouTube Trend Analysis Tool")
    
    return "\n".join(output)

def generate_csv_report(data: Dict[str, Any], report_type: str = 'trend') -> str:
    """
    Generate a CSV report from YouTube trend data
    
    Args:
        data: Dictionary containing trend analysis data
        report_type: Type of report ('trend' or 'compare')
        
    Returns:
        CSV formatted report content
    """
    output = io.StringIO()
    writer = csv.writer(output)
    
    if report_type == 'trend':
        # Add videos section
        if 'videos' in data and data['videos']:
            writer.writerow(["VIDEO DATA"])
            writer.writerow(["Title", "Channel", "Views", "Likes", "Comments", "URL"])
            
            for video in data['videos']:
                snippet = video.get('snippet', {})
                stats = video.get('statistics', {})
                
                writer.writerow([
                    snippet.get('title', 'Untitled'),
                    snippet.get('channelTitle', 'Unknown'),
                    stats.get('viewCount', 0),
                    stats.get('likeCount', 0),
                    stats.get('commentCount', 0),
                    f"https://www.youtube.com/watch?v={video.get('id', '')}"
                ])
            
            writer.writerow([])  # Empty row as separator
        
        # Add channels section
        if 'channels' in data and data['channels']:
            writer.writerow(["CHANNEL DATA"])
            writer.writerow(["Channel", "Subscribers", "Videos", "Total Views", "URL"])
            
            for channel in data['channels']:
                snippet = channel.get('snippet', {})
                stats = channel.get('statistics', {})
                
                writer.writerow([
                    snippet.get('title', 'Untitled'),
                    stats.get('subscriberCount', 0),
                    stats.get('videoCount', 0),
                    stats.get('viewCount', 0),
                    f"https://www.youtube.com/channel/{channel.get('id', '')}"
                ])
            
            writer.writerow([])  # Empty row as separator
        
        # Add topics section
        if 'topics' in data and data['topics']:
            writer.writerow(["TOPIC DATA"])
            writer.writerow(["Topic", "Count"])
            
            for topic in data['topics']:
                writer.writerow([topic['name'], topic['count']])
            
            writer.writerow([])  # Empty row as separator
        
        # Add ideas section
        if 'ideas' in data and data['ideas']:
            writer.writerow(["VIDEO IDEAS"])
            writer.writerow(["Idea"])
            
            for idea in data['ideas']:
                writer.writerow([idea])
    
    elif report_type == 'compare':
        # Add comparison section
        if 'metrics' in data:
            writer.writerow(["NICHE COMPARISON"])
            writer.writerow(["Niche", "Average Views", "Engagement Rate", "Video Count"])
            
            for niche, metrics in data['metrics'].items():
                writer.writerow([
                    niche,
                    metrics.get('avg_views', 0),
                    metrics.get('avg_engagement_rate', 0),
                    metrics.get('video_count', 0)
                ])
            
            writer.writerow([])  # Empty row as separator
            
            # Add rankings
            if 'rankings' in data:
                for metric, ranking in data['rankings'].items():
                    writer.writerow([f"RANKING BY {metric.upper()}"])
                    writer.writerow(["Rank", "Niche"])
                    
                    for i, niche in enumerate(ranking, 1):
                        writer.writerow([i, niche])
                    
                    writer.writerow([])  # Empty row as separator
    
    return output.getvalue()

def generate_excel_report(data: Dict[str, Any], report_type: str = 'trend') -> BinaryIO:
    """
    Generate an Excel report from YouTube trend data
    
    Args:
        data: Dictionary containing trend analysis data
        report_type: Type of report ('trend' or 'compare')
        
    Returns:
        BytesIO object containing Excel file
    """
    output = io.BytesIO()
    
    # Create a Pandas Excel writer using XlsxWriter as the engine
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        if report_type == 'trend':
            # Add videos sheet
            if 'videos' in data and data['videos']:
                videos_data = []
                for video in data['videos']:
                    snippet = video.get('snippet', {})
                    stats = video.get('statistics', {})
                    
                    videos_data.append({
                        'Title': snippet.get('title', 'Untitled'),
                        'Channel': snippet.get('channelTitle', 'Unknown'),
                        'Views': int(stats.get('viewCount', 0)),
                        'Likes': int(stats.get('likeCount', 0)),
                        'Comments': int(stats.get('commentCount', 0)),
                        'URL': f"https://www.youtube.com/watch?v={video.get('id', '')}"
                    })
                
                videos_df = pd.DataFrame(videos_data)
                videos_df.to_excel(writer, sheet_name='Videos', index=False)
            
            # Add channels sheet
            if 'channels' in data and data['channels']:
                channels_data = []
                for channel in data['channels']:
                    snippet = channel.get('snippet', {})
                    stats = channel.get('statistics', {})
                    
                    channels_data.append({
                        'Channel': snippet.get('title', 'Untitled'),
                        'Subscribers': int(stats.get('subscriberCount', 0)),
                        'Videos': int(stats.get('videoCount', 0)),
                        'Total Views': int(stats.get('viewCount', 0)),
                        'URL': f"https://www.youtube.com/channel/{channel.get('id', '')}"
                    })
                
                channels_df = pd.DataFrame(channels_data)
                channels_df.to_excel(writer, sheet_name='Channels', index=False)
            
            # Add topics sheet
            if 'topics' in data and data['topics']:
                topics_data = []
                for topic in data['topics']:
                    topics_data.append({
                        'Topic': topic['name'],
                        'Count': topic['count']
                    })
                
                topics_df = pd.DataFrame(topics_data)
                topics_df.to_excel(writer, sheet_name='Topics', index=False)
            
            # Add ideas sheet
            if 'ideas' in data and data['ideas']:
                ideas_data = []
                for idea in data['ideas']:
                    ideas_data.append({
                        'Idea': idea
                    })
                
                ideas_df = pd.DataFrame(ideas_data)
                ideas_df.to_excel(writer, sheet_name='Video Ideas', index=False)
        
        elif report_type == 'compare':
            # Add comparison sheet
            if 'metrics' in data:
                comparison_data = []
                for niche, metrics in data['metrics'].items():
                    comparison_data.append({
                        'Niche': niche,
                        'Average Views': int(metrics.get('avg_views', 0)),
                        'Engagement Rate': metrics.get('avg_engagement_rate', 0),
                        'Video Count': metrics.get('video_count', 0)
                    })
                
                comparison_df = pd.DataFrame(comparison_data)
                comparison_df.to_excel(writer, sheet_name='Niche Comparison', index=False)
            
            # Add insights sheet
            if 'insights' in data and data['insights']:
                insights_data = []
                for insight in data['insights']:
                    insights_data.append({
                        'Insight': insight
                    })
                
                insights_df = pd.DataFrame(insights_data)
                insights_df.to_excel(writer, sheet_name='Insights', index=False)
    
    output.seek(0)
    return output

def generate_pdf_report(data: Dict[str, Any], report_type: str = 'trend', include_charts: bool = True) -> BinaryIO:
    """
    Generate a PDF report from YouTube trend data
    
    Args:
        data: Dictionary containing trend analysis data
        report_type: Type of report ('trend' or 'compare')
        include_charts: Whether to include charts in the report
        
    Returns:
        BytesIO object containing PDF file
    """
    output = io.BytesIO()
    doc = SimpleDocTemplate(output, pagesize=letter)
    styles = getSampleStyleSheet()
    elements = []
    
    # Add title
    title = "YouTrend Analysis Report"
    elements.append(Paragraph(title, styles['Title']))
    elements.append(Spacer(1, 12))
    
    if report_type == 'trend':
        # Add videos section
        if 'videos' in data and data['videos']:
            elements.append(Paragraph("Top Videos", styles['Heading1']))
            elements.append(Spacer(1, 6))
            
            # Create table data
            table_data = [['Title', 'Channel', 'Views', 'Likes', 'Comments']]
            
            for video in data['videos'][:10]:  # Top 10 videos
                snippet = video.get('snippet', {})
                stats = video.get('statistics', {})
                
                table_data.append([
                    snippet.get('title', 'Untitled')[:40] + '...' if len(snippet.get('title', '')) > 40 else snippet.get('title', 'Untitled'),
                    snippet.get('channelTitle', 'Unknown'),
                    f"{int(stats.get('viewCount', 0)):,}",
                    f"{int(stats.get('likeCount', 0)):,}",
                    f"{int(stats.get('commentCount', 0)):,}"
                ])
            
            # Create table
            table = Table(table_data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            elements.append(table)
            elements.append(Spacer(1, 12))
            
            # Add views chart if enabled
            if include_charts and len(data['videos']) >= 5:
                # Create chart using matplotlib
                plt.figure(figsize=(7, 4))
                
                titles = [video.get('snippet', {}).get('title', 'Untitled')[:20] + '...' for video in data['videos'][:5]]
                views = [int(video.get('statistics', {}).get('viewCount', 0)) for video in data['videos'][:5]]
                
                plt.barh(titles, views, color='skyblue')
                plt.xlabel('Views')
                plt.title('Top 5 Videos by Views')
                plt.tight_layout()
                
                # Save chart to buffer
                chart_buffer = io.BytesIO()
                plt.savefig(chart_buffer, format='png')
                chart_buffer.seek(0)
                
                # Add chart to PDF
                img = Image(chart_buffer, width=450, height=250)
                elements.append(img)
                elements.append(Spacer(1, 12))
                
                plt.close()
        
        # Add channels section
        if 'channels' in data and data['channels']:
            elements.append(Paragraph("Top Channels", styles['Heading1']))
            elements.append(Spacer(1, 6))
            
            # Create table data
            table_data = [['Channel', 'Subscribers', 'Videos', 'Total Views']]
            
            for channel in data['channels'][:10]:  # Top 10 channels
                snippet = channel.get('snippet', {})
                stats = channel.get('statistics', {})
                
                table_data.append([
                    snippet.get('title', 'Untitled'),
                    f"{int(stats.get('subscriberCount', 0)):,}",
                    f"{int(stats.get('videoCount', 0)):,}",
                    f"{int(stats.get('viewCount', 0)):,}"
                ])
            
            # Create table
            table = Table(table_data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            elements.append(table)
            elements.append(Spacer(1, 12))
            
            # Add subscribers chart if enabled
            if include_charts and len(data['channels']) >= 5:
                plt.figure(figsize=(7, 4))
                
                names = [channel.get('snippet', {}).get('title', 'Untitled')[:20] for channel in data['channels'][:5]]
                subscribers = [int(channel.get('statistics', {}).get('subscriberCount', 0)) for channel in data['channels'][:5]]
                
                plt.barh(names, subscribers, color='lightgreen')
                plt.xlabel('Subscribers')
                plt.title('Top 5 Channels by Subscribers')
                plt.tight_layout()
                
                # Save chart to buffer
                chart_buffer = io.BytesIO()
                plt.savefig(chart_buffer, format='png')
                chart_buffer.seek(0)
                
                # Add chart to PDF
                img = Image(chart_buffer, width=450, height=250)
                elements.append(img)
                elements.append(Spacer(1, 12))
                
                plt.close()
        
        # Add topics section
        if 'topics' in data and data['topics']:
            elements.append(Paragraph("Trending Topics", styles['Heading1']))
            elements.append(Spacer(1, 6))
            
            # Create table data
            table_data = [['Topic', 'Count']]
            
            for topic in data['topics'][:10]:  # Top 10 topics
                table_data.append([
                    topic['name'],
                    str(topic['count'])
                ])
            
            # Create table
            table = Table(table_data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            elements.append(table)
            elements.append(Spacer(1, 12))
            
            # Add topics chart if enabled
            if include_charts and len(data['topics']) >= 5:
                plt.figure(figsize=(7, 4))
                
                topic_names = [topic['name'] for topic in data['topics'][:5]]
                topic_counts = [topic['count'] for topic in data['topics'][:5]]
                
                plt.pie(topic_counts, labels=topic_names, autopct='%1.1f%%', startangle=90, colors=plt.cm.Paired.colors)
                plt.axis('equal')
                plt.title('Top 5 Topics Distribution')
                plt.tight_layout()
                
                # Save chart to buffer
                chart_buffer = io.BytesIO()
                plt.savefig(chart_buffer, format='png')
                chart_buffer.seek(0)
                
                # Add chart to PDF
                img = Image(chart_buffer, width=400, height=300)
                elements.append(img)
                elements.append(Spacer(1, 12))
                
                plt.close()
        
        # Add video ideas section
        if 'ideas' in data and data['ideas']:
            elements.append(Paragraph("Video Ideas", styles['Heading1']))
            elements.append(Spacer(1, 6))
            
            for i, idea in enumerate(data['ideas'], 1):
                elements.append(Paragraph(f"{i}. {idea}", styles['Normal']))
                elements.append(Spacer(1, 6))
    
    elif report_type == 'compare':
        # Add comparison section
        if 'metrics' in data:
            elements.append(Paragraph("Niche Comparison", styles['Heading1']))
            elements.append(Spacer(1, 6))
            
            # Create table data
            table_data = [['Niche', 'Average Views', 'Engagement Rate', 'Video Count']]
            
            for niche, metrics in data['metrics'].items():
                table_data.append([
                    niche,
                    f"{int(metrics.get('avg_views', 0)):,}",
                    f"{metrics.get('avg_engagement_rate', 0):.2%}",
                    str(metrics.get('video_count', 0))
                ])
            
            # Create table
            table = Table(table_data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            elements.append(table)
            elements.append(Spacer(1, 12))
            
            # Add comparison chart if enabled
            if include_charts and len(data['metrics']) >= 2:
                plt.figure(figsize=(7, 4))
                
                niches = list(data['metrics'].keys())
                avg_views = [data['metrics'][niche].get('avg_views', 0) for niche in niches]
                
                plt.bar(niches, avg_views, color='skyblue')
                plt.ylabel('Average Views')
                plt.title('Average Views by Niche')
                plt.xticks(rotation=45, ha='right')
                plt.tight_layout()
                
                # Save chart to buffer
                chart_buffer = io.BytesIO()
                plt.savefig(chart_buffer, format='png')
                chart_buffer.seek(0)
                
                # Add chart to PDF
                img = Image(chart_buffer, width=450, height=250)
                elements.append(img)
                elements.append(Spacer(1, 12))
                
                plt.close()
                
                # Add engagement rate chart
                plt.figure(figsize=(7, 4))
                
                engagement_rates = [data['metrics'][niche].get('avg_engagement_rate', 0) * 100 for niche in niches]
                
                plt.bar(niches, engagement_rates, color='lightgreen')
                plt.ylabel('Engagement Rate (%)')
                plt.title('Engagement Rate by Niche')
                plt.xticks(rotation=45, ha='right')
                plt.tight_layout()
                
                # Save chart to buffer
                chart_buffer = io.BytesIO()
                plt.savefig(chart_buffer, format='png')
                chart_buffer.seek(0)
                
                # Add chart to PDF
                img = Image(chart_buffer, width=450, height=250)
                elements.append(img)
                elements.append(Spacer(1, 12))
                
                plt.close()
        
        # Add insights section
        if 'insights' in data and data['insights']:
            elements.append(Paragraph("Insights", styles['Heading1']))
            elements.append(Spacer(1, 6))
            
            for i, insight in enumerate(data['insights'], 1):
                elements.append(Paragraph(f"{i}. {insight}", styles['Normal']))
                elements.append(Spacer(1, 6))
    
    # Build the PDF
    doc.build(elements)
    output.seek(0)
    return output

def generate_report(data: Dict[str, Any], format_type: str = 'pdf', 
                   report_type: str = 'trend', include_charts: bool = True) -> Union[str, BinaryIO]:
    """
    Generate a report in the specified format
    
    Args:
        data: Dictionary containing trend analysis data
        format_type: Report format ('txt', 'csv', 'xlsx', 'pdf')
        report_type: Type of report ('trend' or 'compare')
        include_charts: Whether to include charts in PDF/Excel reports
        
    Returns:
        Report content (string for TXT/CSV, BytesIO for XLSX/PDF)
    """
    if format_type == 'txt':
        return generate_txt_report(data, report_type)
    elif format_type == 'csv':
        return generate_csv_report(data, report_type)
    elif format_type == 'xlsx':
        return generate_excel_report(data, report_type)
    elif format_type == 'pdf':
        return generate_pdf_report(data, report_type, include_charts)
    else:
        raise ValueError(f"Unsupported format type: {format_type}")
